}, xb, yb)
print(m[[1]])
}
stack_before
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l, SIMPLIFY = FALSE)
list(diff[[1]])
}, xb, yb)
print(m)
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l, SIMPLIFY = FALSE)
list(diff[[1]])
}, xb, yb)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l, SIMPLIFY = FALSE)
list(diff[[1]])
}, xb, yb, SIMPLIFY = FALSE)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
list(diff[[1]])
}, xb, yb)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
print(diff)
}, xb, yb)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
print(diff)
}, xb, yb)
print(m)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
print(diff)
}, xb, yb)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
diff
}, xb, yb)
m
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
diff
}, xb, yb)
as.vector(m)
print(m)
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
print(as.vector(m))
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
diff
}, xb, yb)
print(as.vector(m))
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
as.vector(m)
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
diff
}, xb, yb)
as.vector(m)
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
# Convenience function to compute the bit by bit difference
# between two states of the processor
state_diff <- function(regs_before, regs_after, stack_before, stack_after) {
xb <- c(
unlist(regs_after),
unlist(stack_after)
)
yb <- c(
unlist(regs_before),
unlist(stack_before)
)
m <- mapply(function(k, l) {
k <- lapply(k, dectobin)
l <- lapply(l, dectobin)
diff <- mapply(`-`, k, l)
diff
}, xb, yb)
as.list(m)
}
df$StateDiff <- mapply(state_diff, df$RegistersBefore, df$RegistersAfter,
df$StackBefore, df$StackAfter, SIMPLIFY = FALSE)
View(df[[11]][[1]])
data_analysis[["heatmap_global"]]()
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
warnings()
data_analysis[["heatmap_global"]]()
data_analysis[["heatmap_global"]]()
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
warnings()
data_analysis[["global_histogram"]]
data_analysis[["global_histogram"]]()
data_analysis[["heatmap_global"]]()
data_analysis[["instruction"]]("push eax")
data_analysis[["instruction"]]("pop eax")
data_analysis[["instruction"]]("test eax,eax")
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
df
View(df)
View(df)
data_analysis[['instruction']]("push esi")
data_analysis[['export']]
data_analysis[['export']]()
a <- preg %>% gather(Sequence)
a <- df %>% gather(Sequence)
install.packages("tidyr")
library(tidyr)
a <- df %>% gather(Sequence)
View(a)
View(a)
a <- df %>% select(Sequence, StateDiff)
a
a %>% mutate()
b <- a %>% mutate()
View(b)
b <- a %>% mutate(count())
b <- a %>% mutate(count(.))
b <- a %>% mutate(count(x))
b <- a %>% mutate(count(Sequence))
View(b)
View(b)
b <- a %>% count(Sequence)
b <- a %>% group_by(Sequence)
b <- a %>% add_count(Sequence)
b <- a %>% spread(Sequence)
b <- a %>% spread(Sequence, n)
b <- b %>% spread(Sequence, n)
b <- a %>% add_count(Sequence)
b <- a %>% group_by(Sequence) %>% mutate(id= row_number())
b <- a %>% group_by(Sequence) %>% mutate(InstructionIndex = row_number())
c <- b %>% unnest(StateDiff)
View(c)
View(c)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[["export"]]()
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[["export"]]()
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
View(Y)
View(Y)
a <- df %>% paste(Instruction, Arguments)
a <- paste(df$Instruction, df$Arguments)
a
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
inst_and_args
a <- <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
mutate(a = which(inst_and_args == InstAndArgs))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
mutate(a = which(inst_and_args == InstAndArgs))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
mutate(a = which(inst_and_args == df$InstAndArgs))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
mutate(a = detect_index(inst_and_args))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
mutate(a = which(inst_and_args == InstAndArgs))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
mutate(a = which(inst_and_args == df$InstAndArgs))
a <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
mutate(a = detect_index(inst_and_args))
which(df$InstAndArgs)
which(df$InstAndArgs == inst_and_args)
df <- <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
df <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments))
which(df$InstAndArgs == inst_and_args)
df$InstAndArg
inst_and_args
detect_index(df$InstAndArg, inst_and_args)
a <- df %>% mutate(A = match(inst_and_args))
match(df$InstAndArg, inst_and_args)
a <- df %>% mutate(A = match(df$InstAndArg, inst_and_args))
View(a)
View(a)
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(Sequence, OneHotInstruction) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup()
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, OneHotInstruction, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup()
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
drop(InstAndArg)
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, OneHotInstruction, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup()
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, OneHotInstruction, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup()  %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup()  %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
View(Y)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[['export']]()
write.csv(X, "output.csv", row.names = FALSE)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[['export']]()
# ------ EXPORT ------
# Exports a 3-columns table (input), to input.csv
# - 1st column is the sequence index
# - 2nd column is the instruction index within the sequence
# - 3rd column are the parameters values (state_diff of the instruction)
#
# Exports a 3-column table (output), to output.csv
# - 1st column is the sequence index
# - 2nd column is the instruction index within the sequence
# - 3rd column is the index (one hot) of the right instruction to use.
data_analysis[["export"]] <- function(export_stack = TRUE) {
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print(strrep("-", 50))
print(paste0("Exporting ", m, "*", l, "*", n, " matrix."))
print(       "          ^--- number of sequences")
print(       "                  ^--- number of instructions by sequence")
print(       "                      ^--- number of parameters")
X <- df %>%
select(Sequence, StateDiff) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
unnest(StateDiff)
write.csv(X, "input.csv", row.names = FALSE)
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
write.csv(X, "output.csv", row.names = FALSE)
}
debugSource('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[['export']]()
debugSource('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
Y <- df %>%
mutate(InstAndArg = paste(Instruction, Arguments)) %>%
select(Sequence, InstAndArg) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
mutate(OneHotInstruction = match(df$InstAndArg, inst_and_args)) %>%
select(-InstAndArg)
match(df$InstAndArg, inst_and_args)
df %>%
mutate(InstAndArgs = paste(Instruction, Arguments)) %>%
select(Sequence, InstAndArgs) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
mutate(OneHotInstruction = match(df$InstAndArgs, inst_and_args)) %>%
select(-InstAndArgs)
Y <- df %>%
mutate(InstAndArgs = paste(Instruction, Arguments)) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
mutate(OneHotInstruction = match(df$InstAndArgs, inst_and_args)) %>%
select(-InstAndArgs)
Y <- df %>%
mutate(InstAndArgs = paste(Instruction, Arguments)) %>%
mutate(OneHotInstruction = match(df$InstAndArgs, inst_and_args)) %>%
group_by(Sequence) %>%
mutate(InstructionIndex = row_number()) %>%
ungroup() %>%
select(Sequence, InstructionIndex, OneHotInstruction)
Y <- df %>%
mutate(InstAndArgs = paste(Instruction, Arguments)) %>%
mutate(OneHotInstruction = match(df$InstAndArgs, inst_and_args))
Y <- df %>%
mutate(InstAndArgs = paste(Instruction, Arguments))
match(df$InstAndArgs, inst_and_args)
df$InstAndArgs
inst_and_args
Y <- df %>%
mutate(InstAndArgs = paste(Instruction, Arguments)) %>%
mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R', echo=TRUE)
data_analysis[['export']]()
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
data_analysis[['export']]()
