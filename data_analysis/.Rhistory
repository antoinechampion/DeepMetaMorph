for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
X_unnested <- data.frame(X_mat)
View(X_unnested)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
data_analysis[['export']]()
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
data_analysis[['export']]()
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print(strrep("-", 50))
print("Tidying input...")
export_stack = TRUE
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
prin
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
View(Y)
print("- Select")
Y <- Y_padded %>% select(Sequence, InstructionIndex, OneHotInstruction)
Y <- Y %>% select(Sequence, InstructionIndex, OneHotInstruction)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=4))
names(pad) <- names(X)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- jrep(-1, to_pad)
Y_padded <- rbind(X_padded, pad)
}
}
Y_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=4))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- jrep(-1, to_pad)
Y_padded <- rbind(X_padded, pad)
}
}
Y_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=4))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(X_padded, pad)
}
}
Y_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=4))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=4))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
View(Y)
print("- Pad sequences")
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
View(Y_padded)
print("- Arrange")
Y_padded <- Y_padded %>% arrange(Sequence, InstructionIndex)
View(Y_padded)
View(all_instructions)
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print(strrep("-", 50))
print("Tidying input...")
print("- Select")
X <- df %>% select(Sequence, StateDiff)
print("- Group By")
X <- X %>% group_by(Sequence)
print("- Mutate")
X <- X %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
X <- X %>% ungroup()
print("- Pad sequences")
X_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(X)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["StateDiff"]] <- rep(list(rep(-1, n)), to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
X_padded <- rbind(X_padded, pad)
}
}
print("- Arrange")
X_padded <- X_padded %>% arrange(Sequence, InstructionIndex)
print("- Unnest")
# Tidyr unnest is way too slow
# X_padded <- X_padded %>% unnest(StateDiff)
X_mat <- matrix(NA, nrow=m*l*n, ncol=3)
for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
X_unnested <- data.frame(X_mat)
colnames(X_unnested) <- c("Sequence", "InstructionIndex", "StateDiff")
print("Exporting input...")
write.csv(X_unnested, file=gzfile("input.csv.gz"), row.names = FALSE)
print("Tidying output...")
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
print("- Select")
Y <- Y %>% select(Sequence, InstructionIndex, OneHotInstruction)
print("- Pad sequences")
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
print("- Arrange")
Y_padded <- Y_padded %>% arrange(Sequence, InstructionIndex)
print("Exporting output...")
write.csv(Y_padded, file=gzfile("output.csv.gz"), row.names = FALSE)
print("All done.")
print(strrep("-", 50))
View(X_padded)
View(X_unnested)
X_mat <- matrix(NA, nrow=m*l*n, ncol=3)
for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
X_mat <- matrix(NA, nrow=m*l*n, ncol=3)
for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
print(length(unlist(X_padded$StateDiff[[i]])))
print(length(from:to))
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
length(X_padded$StateDiff[[1]])
length(unlist(X_padded$StateDiff[[1]]))
n
export_stack = TRUE
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print(strrep("-", 50))
print("Tidying input...")
print("- Select")
X <- df %>% select(Sequence, StateDiff)
print("- Group By")
X <- X %>% group_by(Sequence)
print("- Mutate")
X <- X %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
X <- X %>% ungroup()
print("- Pad sequences")
X_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(X)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["StateDiff"]] <- rep(list(rep(-1, n)), to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
X_padded <- rbind(X_padded, pad)
}
}
print("- Arrange")
X_padded <- X_padded %>% arrange(Sequence, InstructionIndex)
print("- Unnest")
# Tidyr unnest is way too slow
# X_padded <- X_padded %>% unnest(StateDiff)
X_mat <- matrix(NA, nrow=m*l*n, ncol=3)
for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
print(length(unlist(X_padded$StateDiff[[i]])))
print(length(from:to))
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
X_unnested <- data.frame(X_mat)
colnames(X_unnested) <- c("Sequence", "InstructionIndex", "StateDiff")
print("Exporting input...")
write.csv(X_unnested, file=gzfile("input.csv.gz"), row.names = FALSE)
print("Tidying output...")
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
print("- Select")
Y <- Y %>% select(Sequence, InstructionIndex, OneHotInstruction)
print("- Pad sequences")
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
print("- Arrange")
Y_padded <- Y_padded %>% arrange(Sequence, InstructionIndex)
print("Exporting output...")
write.csv(Y_padded, file=gzfile("output.csv.gz"), row.names = FALSE)
print("All done.")
print(strrep("-", 50))
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print(strrep("-", 50))
print("Tidying input...")
print("- Select")
X <- df %>% select(Sequence, StateDiff)
print("- Group By")
X <- X %>% group_by(Sequence)
print("- Mutate")
X <- X %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
X <- X %>% ungroup()
print("- Pad sequences")
X_padded <- data.frame(X)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(X)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["StateDiff"]] <- rep(list(rep(-1, n)), to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
X_padded <- rbind(X_padded, pad)
}
}
print("- Arrange")
X_padded <- X_padded %>% arrange(Sequence, InstructionIndex)
print("- Unnest")
# Tidyr unnest is way too slow
# X_padded <- X_padded %>% unnest(StateDiff)
X_mat <- matrix(NA, nrow=m*l*n, ncol=3)
for (i in 1:(m*l)) {
from <- n*(i-1)+1
to <- n*i
X_mat[from:to, 1] <- rep(X_padded$Sequence[[i]], n)
X_mat[from:to, 2] <- rep(X_padded$InstructionIndex[[i]], n)
X_mat[from:to, 3] <- unlist(X_padded$StateDiff[[i]])
}
X_unnested <- data.frame(X_mat)
colnames(X_unnested) <- c("Sequence", "InstructionIndex", "StateDiff")
print("Exporting input...")
write.csv(X_unnested, file=gzfile("input.csv.gz"), row.names = FALSE)
print("Tidying output...")
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
print("- Select")
Y <- Y %>% select(Sequence, InstructionIndex, OneHotInstruction)
print("- Pad sequences")
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
print("- Arrange")
Y_padded <- Y_padded %>% arrange(Sequence, InstructionIndex)
print("Exporting output...")
write.csv(Y_padded, file=gzfile("output.csv.gz"), row.names = FALSE)
print("All done.")
print(strrep("-", 50))
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
install.packages("mltools")
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
dt <- data.table(
ID = 1:4,
color = factor(c("red", NA, "blue", "blue"), levels=c("blue", "green", "red"))
)
dt <- data.frame(
ID = 1:4,
color = factor(c("red", NA, "blue", "blue"), levels=c("blue", "green", "red"))
)
dt <- data.frame(
ID = 1:4,
color = factor(c("red", NA, "blue", "blue"), levels=c("blue", "green", "red"))
)
dt
one_hot(dt)
customers <- data.frame(
id=c(10, 20, 30, 40, 50),
gender=c('male', 'female', 'female', 'male', 'female'),
mood=c('happy', 'sad', 'happy', 'sad','happy'),
outcome=c(1, 1, 0, 0, 0))
customers
dmy <- dummyVars(" ~ .", data = customers)
library(caret)
install.packages("caret")
dmy <- dummyVars(" ~ .", data = customers)
library(caret)
dmy <- dummyVars(" ~ .", data = customers)
dmy
source('~/GitHub/DeepMetaMorph/data_analysis/Script.R')
export_stack = TRUE
m <- length(all_sequences)
l <- max(sapply(all_sequences, length))
n <- length(df$RegistersBefore[[1]]) * 32
if (export_stack) {
n <- n + length(df$StackBefore[[1]]) * 32
}
print("Tidying output...")
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
print("- Select")
Y <- Y %>% select(Sequence, InstructionIndex, OneHotInstruction)
print("- Pad sequences")
Y_padded <- data.frame(Y)
for (i in 1:m) {
seq_l <- length(all_sequences[[i]])
if (seq_l < l) {
to_pad <- l - seq_l
pad <- data.frame(matrix(NA, nrow=to_pad, ncol=3))
names(pad) <- names(Y)
pad[["Sequence"]] <- rep(i,to_pad)
pad[["InstructionIndex"]] <- (seq_l+1):l
pad[["OneHotInstruction"]] <- rep(-1, to_pad)
Y_padded <- rbind(Y_padded, pad)
}
}
print("- Arrange")
Y_padded <- Y_padded %>% arrange(Sequence, InstructionIndex)
View(Y_padded)
dmy <- dummyVars(" ~ .", data = Y_padded)
trsf <- data.frame(predict(dmy, newdata = Y_padded))
trsf
View(trsf)
View(trsf)
a <- model.matrix(~0+category)
a <- model.matrix(~0+Y_padded)
a <- model.matrix(~0+Y_padded$OneHotInstruction)
a
install.packages("onehot")
library(onehot)
onehot(Y_padded$OneHotInstruction)
onehot(Y_padded)
a <- onehot(Y_padded)
View(a)
b <- predict(a, Y_padded)
View(b)
inst_and_args <- unique(paste(df$Instruction, df$Arguments))
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
Y <- Y %>% select(Sequence, InstAndArgs, OneHotInstruction)
Y <- Y %>% select(Sequence, InstructionIndex, InstAndARgs)
Y <- Y %>% select(Sequence, InstructionIndex, InstAndArgs)
print("- Mutate")
Y <- df %>% mutate(InstAndArgs = paste(Instruction, Arguments))
print("- Mutate")
Y <- Y %>% mutate(OneHotInstruction = match(InstAndArgs, inst_and_args))
print("- Group By")
Y <- Y %>% group_by(Sequence)
print("- Mutate")
Y <- Y %>% mutate(InstructionIndex = row_number())
print("- Ungroup")
Y <- Y %>% ungroup()
Y <- Y %>% select(Sequence, InstructionIndex, InstAndArgs)
encoder <- onehot(Y)
a <- predict(encoder, Y)
View(a)
encoder <- onehot(Y, stringsAsFactors = True)
encoder <- onehot(Y, stringsAsFactors = TRUE)
encoder <- onehot(Y, stringsAsFactors = TRUE, max_levels = 10000)
a <- predict(encoder, Y)
a
